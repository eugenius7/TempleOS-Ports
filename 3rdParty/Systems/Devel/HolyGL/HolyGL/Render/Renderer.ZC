
/**
	@ingroup renderer
	@brief Create new renderer context.

	@param[in] xTiles			Number of tiles along X axis of texture.
	@param[in] yTiles			Number of tiles along Y axis of texture.
	@param[in] maxTrisPerTile	Maximum number of triangles that can be binned
								in a tile.
	@param[in] maxTris			Maximum number of triangles that can be
								generated by the vertex shader (including
								extra triangles generated by clipping).
	@param[in] attrSize			Number of Vec4 vertex attributes being passed
								by vertex shader to be interpolated for the
								fragment shader.
	@return						Pointer to new renderer context.
*/
CGLRenderer *GLRendererNew(I64 xTiles, I64 yTiles,
	I64 maxTrisPerTile, I64 maxTris, I64 attrSize)
{
	I64 i;

	CGLRenderer *renderer = MAlloc(sizeof(CGLRenderer));

	renderer->nXTiles = xTiles;
	renderer->nYTiles = yTiles;
	renderer->nTiles = xTiles * yTiles;

	// Allocate vertex shader output buffer
	renderer->nTris = 0;
	renderer->tris = MAllocAligned((16 + attrSize * 16) * maxTris, 16);

	// Allocate tile index buffers
	renderer->tileTriBins = MAlloc(8 * renderer->nTiles);
	for (i = 0; i < renderer->nTiles; i++)
	{
		renderer->tileTriBins[i] = MAlloc(maxTrisPerTile * sizeof(U32));
	}

	return renderer;
};

/**
	@ingroup renderer
	@brief Free renderer context.

	@param[in,out]	renderer	Render context to free.
*/
U0 GLRendererFree(CGLRenderer *renderer)
{
	I64 i;

	Free(renderer->tris);
	for (i = 0; i < renderer->nTiles; i++)
	{
		Free(renderer->tileTriBins[i]);
	}
	Free(renderer->tileTriBins);
	Free(renderer);
}